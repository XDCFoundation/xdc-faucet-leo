{"version":3,"sources":["modules/baseComponent.js","constants/index.js","managers/history.js","utility/httpService.js","modules/XDCTestFaucet/XDCTestFaucet.js","modules/XDCTestFaucet/index.js","routes.js","reducers/user.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["BaseComponent","props","Component","httpConstants","POST","PUT","GET","DELETE","APPLICATION_JSON","MULTIPART_FORM_DATA","APPLICATION_FORM_URLENCODED","IMAGE_PNG","REDIRECT_URL","history","createBrowserHistory","httpService","method","headers","data","url","requestOptions","body","JSON","stringify","fetch","then","response","text","parse","success","error","code","message","statusText","Promise","reject","catch","err","XDCTestFaucet","useState","receiver","setReceiver","isLoading","setIsLoading","isVerified","setIsVerified","captchaErr","setCaptchaErr","inputErr","setInputErr","status","Hash","setMessage","isCopied","setIsCopied","appropriateError","setAppropriateError","handleOnSubmit","e","a","preventDefault","length","process","txHash","className","src","alt","onSubmit","type","value","onChange","target","inputHandler","placeholder","title","placement","onClick","href","sitekey","onVerify","token","key","Main","state","Routes","muiTheme","getMuiTheme","exact","path","component","from","to","connect","user","initialState","isLoggedIn","loginFailure","deviceId","sessionToken","loading","isForgotPasswordSuccess","combineReducers","action","loggerMiddleware","createLogger","createStore","rootReducer","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","match","TailwindReact","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cc3d095.chunk.js","sourcesContent":["//base class\r\nimport React, {Component} from \"react\";\r\n\r\nexport default class BaseComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n}\r\n","/**\r\n * Created by Ayush Kulshrestha on 18/09/2019.\r\n */\r\n\r\n\r\nexport const httpConstants = {\r\n    METHOD_TYPE: {\r\n        POST: 'POST',\r\n        PUT: 'PUT',\r\n        GET: 'GET',\r\n        DELETE: 'DELETE',\r\n    },\r\n    CONTENT_TYPE: {\r\n        APPLICATION_JSON: 'application/json',\r\n        MULTIPART_FORM_DATA: 'multipart/form-data',\r\n        APPLICATION_FORM_URLENCODED: 'application/x-www-form-urlencoded',\r\n        IMAGE_PNG: 'image/png'\r\n    },\r\n    DEVICE_TYPE: {\r\n        WEB: 'web'\r\n    },\r\n    API_END_POINT: {}\r\n};\r\n\r\nexport const REDIRECT_URL = {\r\n    OBSERVER_TRANSACTION_HASH_URL : \"https://observer.xdc.org/transaction-details/\",\r\n}","import { createBrowserHistory } from 'history';\r\n\r\n/**\r\n * The history library lets you easily manage session history anywhere JavaScript runs.\r\n * history abstracts away the differences in various environments and provides a minimal API\r\n * that lets you manage the history stack, navigate, and persist state between sessions.\r\n */\r\n\r\n\r\nexport const history = createBrowserHistory();\r\n","import {httpConstants} from \"../constants\";\r\nimport {history} from \"../managers/history\";\r\n\r\nexport const httpService = (method, headers, data, url) => {\r\n    const requestOptions = {\r\n        method: method,\r\n        headers: headers || {'Content-Type': 'application/json'}\r\n    };\r\n\r\n    if (method !== httpConstants.METHOD_TYPE.GET)\r\n        requestOptions.body = JSON.stringify(data);\r\n\r\n    return fetch(url, requestOptions)\r\n        .then(function handleResponse(response) {\r\n            return response.text().then(text => {\r\n                const data = text && JSON.parse(text);\r\n\r\n                if (!data.success) {\r\n                    // if (data.responseCode === 401 || data.responseCode === \"401\") {\r\n                    //     history.push(screenPathConstants.LANDING_PAGE);\r\n                    //     // auto logout if 401 response returned from api\r\n                    //     // location.reload(true);\r\n                    // }\r\n                    const error = data.error.code === 500 ? data : (data && data.message) || response.statusText;\r\n                    return Promise.reject(error);\r\n                }\r\n\r\n                return data;\r\n            });\r\n        }).catch(function (err) {\r\n            return err;\r\n        })\r\n\r\n};","import React, { useState } from \"react\";\r\nimport HCaptcha from \"@hcaptcha/react-hcaptcha\";\r\nimport { httpConstants } from \"../../constants\";\r\nimport { REDIRECT_URL } from \"../../constants\";\r\nimport { httpService } from \"../../utility/httpService\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nfunction XDCTestFaucet() {\r\n  const [receiver, setReceiver] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [captchaErr, setCaptchaErr] = useState(false);\r\n  const [inputErr, setInputErr] = useState(false);\r\n  const [message, setMessage] = useState({\r\n    status: false,\r\n    message: \"\",\r\n    Hash: \"\",\r\n  });\r\n  const [isCopied, setIsCopied] = useState(false);\r\n  const [appropriateError, setAppropriateError] = useState(\"\");\r\n  const validateCaptcha = (token, key) => {\r\n    setIsVerified(true);\r\n  };\r\n\r\n  const handleOnSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (receiver.length < 43) {\r\n      setInputErr(true);\r\n      return;\r\n    }\r\n    if (!isVerified) {\r\n      setCaptchaErr(true);\r\n      return;\r\n    } else {\r\n      setIsLoading(true);\r\n      const data = {\r\n        receiver,\r\n      };\r\n      const response = await httpService(\r\n        httpConstants.METHOD_TYPE.POST,\r\n        { \"Content-Type\": httpConstants.CONTENT_TYPE.APPLICATION_JSON },\r\n        data,\r\n        process.env.REACT_APP_NODE_URL\r\n      );\r\n      if (response.success) {\r\n        setMessage({\r\n          status: true,\r\n          message: \"Sent\",\r\n          Hash: response?.success?.txHash,\r\n        });\r\n      } else {\r\n        setMessage({ status: true, message: \"Failed\", Hash: \"\" });\r\n        setAppropriateError(response?.error?.message);\r\n      }\r\n    }\r\n  };\r\n  const inputHandler = (e) => {\r\n    setReceiver(e.target.value);\r\n    setInputErr(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-full h-screen bg-primary-50 pt-18.25 px-3\">\r\n        <img\r\n          className=\"h-20 w-20 mx-auto\"\r\n          src=\"/images/XDC-icon-128X128.svg\"\r\n          alt=\"\"\r\n        />\r\n        <div className=\"min-h-115 max-w-123.75 flex flex-col items-center bg-white mx-auto rounded-lg mt-7 px-6.75 pt-6.75 pb-11\">\r\n          <div className=\"sm:text-ft10 text-ft9 font-InterSemiBold\">\r\n            <span className=\"text-blue-200\">XDC</span>Drop\r\n          </div>\r\n          <div className=\"text-grey-100 sm:text-ft8 text-ft7 font-InterMedium mt-1.75\">\r\n            XDC Testnet Faucet\r\n          </div>\r\n          <div className=\"text-black-100 sm:text-ft7 text-ft5 font-InterSemiBold mt-11.25\">\r\n            Apothem Network\r\n          </div>\r\n          <form className=\"w-full mt-3.75\" onSubmit={handleOnSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              value={receiver}\r\n              onChange={(e) => inputHandler(e)}\r\n              placeholder=\"XDC Address\"\r\n              className=\"border border-grey-150 w-full rounded-lg sm:text-ft6 text-ft5 font-InterRegular p-3.25 focus:border focus:border-grey-150 focus:outline-none placeholder-grey-250 placeholder-align-custom\"\r\n            />\r\n            {inputErr ? (\r\n              <div className=\"sm:text-ft3 text-ft1 font-InterRegular text-red-100 text-center\">\r\n                Invalid Address\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {!isLoading ? (\r\n              <>\r\n                <div className=\"w-full flex justify-center flex-col items-center\">\r\n                  <div className=\"sm:mt-8 mt-5 sm:mb-5 mb-3 transform sm:scale-144\">\r\n                    <HCaptcha\r\n                      sitekey=\"6ec32851-ea77-4623-8b40-5f6c76353f0c\"\r\n                      onVerify={(token, key) => validateCaptcha(token, key)}\r\n                    />\r\n                  </div>\r\n                  {captchaErr && !isVerified ? (\r\n                    <div className=\"sm:text-ft3 text-ft1 font-InterRegular text-red-100\">\r\n                      Before you proceed, please complete the captcha\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"w-full text-center mt-5 text-white py-3.5 bg-blue-50 text-ft6 font-InterSemiBold rounded-lg cursor-pointer\"\r\n                >\r\n                  Get 1000 XDC\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {!message.status ? (\r\n                  <div className=\"text-center font-InterRegular text-ft6 text-black-100 mt-10.25\">\r\n                    Sending XDC…\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <div className=\"flex gap-1 justify-center items-center w-full mt-10.25\">\r\n                      {message.message === \"Sent\" ? (\r\n                        <img\r\n                          className=\"h-4.75 w-4.75\"\r\n                          src=\"/images/Success.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ) : (\r\n                        <img\r\n                          className=\"h-4.75 w-4.75\"\r\n                          src=\"/images/Cross_Mark.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      )}\r\n                      <div className=\"text-ft6 font-InterRegular block text-black-100\">\r\n                        {message.message}\r\n                      </div>\r\n                    </div>\r\n                    {appropriateError?.length > 2 ? (\r\n                      <div className=\"sm:text-ft3 text-ft1 font-InterRegular text-red-100 text-center mt-1\">\r\n                        {appropriateError}\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </>\r\n                )}\r\n                <div className=\"mt-11.25\">\r\n                  <div className=\"h-2.25 w-full -mb-2.25 rounded-sm bg-grey-200\"></div>\r\n                  <div\r\n                    className={`h-2.25 rounded-sm bg-blue-100 ${\r\n                      !message.status ? \"animate-progress\" : \"w-full\"\r\n                    }`}\r\n                  ></div>\r\n                  <div className=\"flex -mt-2.25 justify-evenly\">\r\n                    <span className=\"h-2.25 w-2.75 bg-white\"></span>\r\n                    <span className=\"h-2.25 w-2.75 bg-white\"></span>\r\n                    <span className=\"h-2.25 w-2.75 bg-white\"></span>\r\n                    <span className=\"h-2.25 w-2.75 bg-white\"></span>\r\n                    <span className=\"h-2.25 w-2.75 bg-white\"></span>\r\n                  </div>\r\n                </div>\r\n                {message.message === \"Sent\" ? (\r\n                  <>\r\n                    <div className=\"mt-10 text-ft7 flex items-center justify-center\">\r\n                      <div className=\"font-InterRegular mr-1\">TxHash: </div>\r\n                      <div className=\"truncate font-InterRegular text-blue-50\">\r\n                        {message?.Hash}\r\n                      </div>\r\n                      <CopyToClipboard text={message?.Hash}>\r\n                        <Tooltip\r\n                          title={isCopied ? \"Copied\" : \"Copy\"}\r\n                          placement=\"top\"\r\n                          onClick={() => setIsCopied(true)}\r\n                        >\r\n                          <img\r\n                            className=\"cursor-pointer\"\r\n                            src=\"/images/Copy.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </Tooltip>\r\n                      </CopyToClipboard>\r\n                    </div>\r\n                    <a\r\n                      href={\r\n                        REDIRECT_URL.OBSERVER_TRANSACTION_HASH_URL +\r\n                        message?.Hash\r\n                      }\r\n                      className=\"w-full rounded-lg h-12 flex justify-center items-center mt-7.75 border text-blue-50 sm:text-ft6 text-ft4 font-InterSemiBold border-blue-50 cursor-pointer\"\r\n                    >\r\n                      View Transaction on Observatory\r\n                    </a>\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </>\r\n            )}\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"text-center text-ft4 text-grey-50 font-InterMedium absolute md:bottom-16 bottom-6 inset-x-0\">\r\n        Powered by XDC\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default XDCTestFaucet;\r\n","import React from \"react\";\r\nimport BaseComponent from \"../baseComponent\";\r\nimport XDCTestFaucet from \"./XDCTestFaucet\";\r\n\r\nclass Main extends BaseComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return <XDCTestFaucet />;\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport {Router, Route} from 'react-router-dom';\r\nimport {Redirect, Switch} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\nimport XDCTestFaucet from \"./modules/XDCTestFaucet\"\r\nimport BaseComponent from \"./modules/baseComponent\";\r\nimport {history} from \"./managers/history\";\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\r\n\r\nclass Routes extends BaseComponent {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MuiThemeProvider muiTheme={getMuiTheme()}>\r\n                <Router history={history}>\r\n                    <Switch>\r\n                        <Route exact path={'/'} component={XDCTestFaucet}/>\r\n                        <Redirect exact from='*' to=\"/\"/>\r\n                    </Switch>\r\n                </Router>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {user: state.user}\r\n};\r\nexport default connect(mapStateToProps)(Routes);\r\n","let initialState = {\r\n    isLoggedIn: false,\r\n    loginFailure: null,\r\n    deviceId: null,\r\n    sessionToken: null,\r\n    loading: false,\r\n    isForgotPasswordSuccess: false\r\n};\r\nexport default function user(state = initialState, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport user from \"./user\";\r\n\r\nexport default combineReducers({\r\n    user\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from \"./reducers/index\";\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport default  createStore(\r\n    rootReducer,\r\n    applyMiddleware(\r\n        thunkMiddleware,\r\n        loggerMiddleware\r\n    )\r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Routes from './routes';\r\nimport store from './store.js';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './assets/styles/custom.css';\r\n\r\nfunction TailwindReact() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <Routes component={Routes}/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nReactDOM.render(<TailwindReact/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}